ploidy=as.numeric(genoData[2])
ploidy=2
#set up possible genotypes
alleleList<-substr(alleles,1,n_alleles)
alleleList<-replicate(ploidy, alleleList)
#convert to vector, then sort numerically and convert back to text
alleleList<-as.vector(alleleList)
alleleList<-sort(as.numeric(alleleList))
alleleList<-as.character(alleleList)
genoCombos<-combn(alleleList,ploidy)
#print(genoCombos)
GenotypeList<-t(genoCombos)
possibleGenotypes<-unique(GenotypeList)
possibleGenotypes
#make conversion table for genotypes
realAlleles<-genoData[3]
realAllelesOrder<-unlist(strsplit(as.character(realAlleles),",",perl=TRUE))
#make table to convert numeric genotype codes to real genotypes
numericGeno<-apply(possibleGenotypes,1,function(x) paste(x,collapse=","))
realGenotypes<-apply(possibleGenotypes,2,function(x) realAllelesOrder[as.numeric(x)])
realGeno<-apply(realGenotypes,1,function(x) paste(x,collapse=","))
genoConvert<-as.data.frame(t(rbind(numericGeno,realGeno)))
genoConvert
#function to generate allele dosage for each genotype
generateDosage<-function(genos){
#split genotype into each allele for dosage assignment
genoAlleles<-str_split_fixed(genos,",",2)
#function to count number of times each possible allele is present in each possible genotype
genoDosage<-function(singleGeno){
#test vector of all possible alleles to see which allele matches the genotype
#do this individually for each allele in the genotype
matches<-t(sapply(singleGeno,function(x) as.numeric(alleles==x)))
#sum vector of possible allele matches for each allele in genotype
#this gives count of each possible allele in the genotype being tested
matches<-apply(matches,2,function(x) sum(x))
return(matches)
}
#count number of times each possible allele is present in each possible genotype
genoMatches<-t(apply(genoAlleles,1,genoDosage))
#divide count matrix by ploidy to get relative dosage of each allele
dosage<-genoMatches/ploidy
return(dosage)
}
relative_dosage<-generateDosage(numericGeno)
relative_dosage
readList<-genoData[4:length(genoData)]
n_alleles<-strsplit(as.character(genoData[3]),",")
n_alleles<-length(n_alleles[[1]])
#use numbers in place of actual alleles to allow haplotypes and other allele coding (indel, etc)
#convert back to actual alleles later
alleles=as.character(seq(1:n_alleles))
ploidy=as.numeric(genoData[2])
#ploidy=2
#set up possible genotypes
alleleList<-substr(alleles,1,n_alleles)
alleleList<-replicate(ploidy, alleleList)
#convert to vector, then sort numerically and convert back to text
alleleList<-as.vector(alleleList)
alleleList<-sort(as.numeric(alleleList))
alleleList<-as.character(alleleList)
genoCombos<-combn(alleleList,ploidy)
#print(genoCombos)
GenotypeList<-t(genoCombos)
possibleGenotypes<-unique(GenotypeList)
#make conversion table for genotypes
realAlleles<-genoData[3]
realAllelesOrder<-unlist(strsplit(as.character(realAlleles),",",perl=TRUE))
#make table to convert numeric genotype codes to real genotypes
numericGeno<-apply(possibleGenotypes,1,function(x) paste(x,collapse=","))
realGenotypes<-apply(possibleGenotypes,2,function(x) realAllelesOrder[as.numeric(x)])
realGeno<-apply(realGenotypes,1,function(x) paste(x,collapse=","))
genoConvert<-as.data.frame(t(rbind(numericGeno,realGeno)))
numericGeno
relative_dosage<-generateDosage(numericGeno)
relative_dosage
numericGeno
alleles
relative_dosage
readList<-genoData[4:length(genoData)]
n_alleles<-strsplit(as.character(genoData[3]),",")
n_alleles<-length(n_alleles[[1]])
#use numbers in place of actual alleles to allow haplotypes and other allele coding (indel, etc)
#convert back to actual alleles later
alleles=as.character(seq(1:n_alleles))
ploidy=as.numeric(genoData[2])
#set up possible genotypes
alleleList<-substr(alleles,1,n_alleles)
alleleList<-replicate(ploidy, alleleList)
#convert to vector, then sort numerically and convert back to text
alleleList<-as.vector(alleleList)
alleleList<-sort(as.numeric(alleleList))
alleleList<-as.character(alleleList)
genoCombos<-combn(alleleList,ploidy)
GenotypeList<-t(genoCombos)
possibleGenotypes<-unique(GenotypeList)
#make conversion table for genotypes
realAlleles<-genoData[3]
realAllelesOrder<-unlist(strsplit(as.character(realAlleles),",",perl=TRUE))
#make table to convert numeric genotype codes to real genotypes
numericGeno<-apply(possibleGenotypes,1,function(x) paste(x,collapse=""))
realGenotypes<-apply(possibleGenotypes,2,function(x) realAllelesOrder[as.numeric(x)])
realGeno<-apply(realGenotypes,1,function(x) paste(x,collapse=","))
genoConvert<-as.data.frame(t(rbind(numericGeno,realGeno)))
#make matrix of relative dosage for each possible genotype
relative_dosage<-matrix(NA,nrow=dim(possibleGenotypes)[1],ncol=n_alleles)
for(i in 1:n_alleles){
proportion<-sapply(numericGeno,function(x) str_count(x, alleles[i]))
proportion<-proportion/ploidy
relative_dosage[,i]<-proportion
}
relative_dosage
numericGeno
singleGeno="1111"
alleles
#test vector of all possible alleles to see which allele matches the genotype
#do this individually for each allele in the genotype
matches<-t(sapply(singleGeno,function(x) as.numeric(alleles==x)))
matches
readList<-genoData[4:length(genoData)]
n_alleles<-strsplit(as.character(genoData[3]),",")
n_alleles<-length(n_alleles[[1]])
#use numbers in place of actual alleles to allow haplotypes and other allele coding (indel, etc)
#convert back to actual alleles later
alleles=as.character(seq(1:n_alleles))
ploidy=as.numeric(genoData[2])
#ploidy=2
#set up possible genotypes
alleleList<-substr(alleles,1,n_alleles)
alleleList<-replicate(ploidy, alleleList)
#convert to vector, then sort numerically and convert back to text
alleleList<-as.vector(alleleList)
alleleList<-sort(as.numeric(alleleList))
alleleList<-as.character(alleleList)
genoCombos<-combn(alleleList,ploidy)
#print(genoCombos)
GenotypeList<-t(genoCombos)
possibleGenotypes<-unique(GenotypeList)
#make conversion table for genotypes
realAlleles<-genoData[3]
realAllelesOrder<-unlist(strsplit(as.character(realAlleles),",",perl=TRUE))
#make table to convert numeric genotype codes to real genotypes
numericGeno<-apply(possibleGenotypes,1,function(x) paste(x,collapse=","))
realGenotypes<-apply(possibleGenotypes,2,function(x) realAllelesOrder[as.numeric(x)])
realGeno<-apply(realGenotypes,1,function(x) paste(x,collapse=","))
genoConvert<-as.data.frame(t(rbind(numericGeno,realGeno)))
numericGeno
singleGeno="1,1,1,1"
#test vector of all possible alleles to see which allele matches the genotype
#do this individually for each allele in the genotype
matches<-t(sapply(singleGeno,function(x) as.numeric(alleles==x)))
matches
#sum vector of possible allele matches for each allele in genotype
#this gives count of each possible allele in the genotype being tested
matches<-apply(matches,2,function(x) sum(x))
matches
singleGeno="1,1"
#test vector of all possible alleles to see which allele matches the genotype
#do this individually for each allele in the genotype
matches<-t(sapply(singleGeno,function(x) as.numeric(alleles==x)))
matches
#sum vector of possible allele matches for each allele in genotype
#this gives count of each possible allele in the genotype being tested
matches<-apply(matches,2,function(x) sum(x))
return(matches)
relative_dosage<-generateDosage(numericGeno)
relative_dosage
singleGeno="1,1"
sapply(singleGeno,function(x) as.numeric(alleles==x))
#count number of times each possible allele is present in each possible genotype
genoMatches<-t(apply(genoAlleles,1,genoDosage))
#function to count number of times each possible allele is present in each possible genotype
genoDosage<-function(singleGeno){
singleGeno="1,1"
#test vector of all possible alleles to see which allele matches the genotype
#do this individually for each allele in the genotype
matches<-t(sapply(singleGeno,function(x) as.numeric(alleles==x)))
#sum vector of possible allele matches for each allele in genotype
#this gives count of each possible allele in the genotype being tested
matches<-apply(matches,2,function(x) sum(x))
return(matches)
}
#count number of times each possible allele is present in each possible genotype
genoMatches<-t(apply(genoAlleles,1,genoDosage))
genos="1,1"
#split genotype into each allele for dosage assignment
genoAlleles<-str_split_fixed(genos,",",2)
genoAlleles
genos="1,1,1,1"
#split genotype into each allele for dosage assignment
genoAlleles<-str_split_fixed(genos,",",2)
genoAlleles
#split genotype into each allele for dosage assignment
genoAlleles<-str_split_fixed(genos,",")
genoAlleles
#split genotype into each allele for dosage assignment
genoAlleles<-str_split_fixed(genos,",")
#split genotype into each allele for dosage assignment
genoAlleles<-str_split(genos,",")
genoAlleles
#split genotype into each allele for dosage assignment
genoAlleles<-str_split_fixed(genos,",",2)
genoAlleles
#split genotype into each allele for dosage assignment
genoAlleles<-str_split(genos,",",2)
genoAlleles
#split genotype into each allele for dosage assignment
genoAlleles<-str_split_all(genos,",",2)
#split genotype into each allele for dosage assignment
genoAlleles<-str_split(genos,",",2)
genoAlleles
#split genotype into each allele for dosage assignment
genoAlleles<-str_split(genos,",")
genoAlleles
#split genotype into each allele for dosage assignment
genoAlleles<-str_split(genos,",",simplify=TRUE)
genoAlleles
genoData<-cbind(testLocusTable,testReads)
readList<-genoData[4:length(genoData)]
n_alleles<-strsplit(as.character(genoData[3]),",")
n_alleles<-length(n_alleles[[1]])
#use numbers in place of actual alleles to allow haplotypes and other allele coding (indel, etc)
#convert back to actual alleles later
alleles=as.character(seq(1:n_alleles))
ploidy=as.numeric(genoData[2])
#ploidy=2
#set up possible genotypes
alleleList<-substr(alleles,1,n_alleles)
alleleList<-replicate(ploidy, alleleList)
#convert to vector, then sort numerically and convert back to text
alleleList<-as.vector(alleleList)
alleleList<-sort(as.numeric(alleleList))
alleleList<-as.character(alleleList)
genoCombos<-combn(alleleList,ploidy)
#print(genoCombos)
GenotypeList<-t(genoCombos)
possibleGenotypes<-unique(GenotypeList)
#make conversion table for genotypes
realAlleles<-genoData[3]
realAllelesOrder<-unlist(strsplit(as.character(realAlleles),",",perl=TRUE))
#make table to convert numeric genotype codes to real genotypes
numericGeno<-apply(possibleGenotypes,1,function(x) paste(x,collapse=","))
realGenotypes<-apply(possibleGenotypes,2,function(x) realAllelesOrder[as.numeric(x)])
realGeno<-apply(realGenotypes,1,function(x) paste(x,collapse=","))
genoConvert<-as.data.frame(t(rbind(numericGeno,realGeno)))
#function to generate allele dosage for each genotype
generateDosage<-function(genos){
#split genotype into each allele for dosage assignment
genoAlleles<-str_split(genos,",",simplify=TRUE)
#function to count number of times each possible allele is present in each possible genotype
genoDosage<-function(singleGeno){
#test vector of all possible alleles to see which allele matches the genotype
#do this individually for each allele in the genotype
matches<-t(sapply(singleGeno,function(x) as.numeric(alleles==x)))
#sum vector of possible allele matches for each allele in genotype
#this gives count of each possible allele in the genotype being tested
matches<-apply(matches,2,function(x) sum(x))
return(matches)
}
#count number of times each possible allele is present in each possible genotype
genoMatches<-t(apply(genoAlleles,1,genoDosage))
#divide count matrix by ploidy to get relative dosage of each allele
dosage<-genoMatches/ploidy
return(dosage)
}
relative_dosage<-generateDosage(numericGeno)
relative_dosage
#load GTscore
source("GTscore.R")
#load locus table and allele reads file
singleSNP_locusTable<-read.delim("LocusTable_singleSNPs.txt",header=TRUE,stringsAsFactors=FALSE)
singleSNP_alleleReads<-read.delim("AlleleReads_singleSNPs.txt",header=TRUE,row.names=1,stringsAsFactors=FALSE)
head(singleSNP_locusTable)
singleSNP_alleleReads[1:5,1:5]
#generate singleSNP genotypes using the polyGen algorithm
polyGenResults_singleSNP<-polyGen(singleSNP_locusTable,singleSNP_alleleReads)
polyGenResults_singleSNP[1:5,1:5]
GTscore_individualSummary<-read.delim("GTscore_individualSummary.txt",header=TRUE,stringsAsFactors=FALSE)
head(GTscore_individualSummary)
singleSNP_sampleSummary<-summarizeSamples(polyGenResults_singleSNP)
head(singleSNP_sampleSummary)
GTscore_individualSummary<-merge(GTscore_individualSummary,singleSNP_sampleSummary,by.x="Sample",by.y="sample")
ggplot()+geom_histogram(data=GTscore_individualSummary,aes(x=GenotypeRate),binwidth=0.03)+xlim(-0.01,1.01)+
labs(title="Sample Genotype Rate", x="Genotype Rate", y="Count")+
theme_bw()+theme(plot.title=element_text(hjust=0.5),plot.subtitle=element_text(hjust=0.5))
ggplot()+geom_histogram(data=GTscore_individualSummary,aes(x=Heterozygosity),binwidth=0.03)+xlim(-0.01,1.01)+
labs(title="Sample Heterozygosity", x="Heterozygosity", y="Count")+
theme_bw()+theme(plot.title=element_text(hjust=0.5),plot.subtitle=element_text(hjust=0.5))
#dashed line added at 90% genotype rate, this is not a strict threshold, just a goal to aim for
ggplot()+geom_point(data=GTscore_individualSummary,aes(x=Primer.Probe.Reads,y=GenotypeRate))+
labs(title="Genotype Rate vs Total Reads per Sample", x="Primer Probe Reads", y="Genotype Rate")+
theme_bw()+theme(plot.title=element_text(hjust=0.5),plot.subtitle=element_text(hjust=0.5))+
geom_hline(yintercept=0.9,lty="dashed")
ggplot()+geom_point(data=GTscore_individualSummary,aes(x=Primer.Probe.Reads,y=Heterozygosity))+
labs(title="Heterozygosity vs Total Reads per Sample", x="Primer Probe Reads", y="Heterozygosity")+
theme_bw()+theme(plot.title=element_text(hjust=0.5),plot.subtitle=element_text(hjust=0.5))+
geom_hline(yintercept=0.3, lty="dashed")
ggplot()+geom_point(data=GTscore_individualSummary,aes(x=GenotypeRate,y=Heterozygosity))+
labs(title="Heterozygosity vs Genotype Rate per Sample", x="Genotype Rate", y="Heterozygosity")+
theme_bw()+theme(plot.title=element_text(hjust=0.5),plot.subtitle=element_text(hjust=0.5))
ggplot()+geom_point(data=GTscore_individualSummary,aes(x=conScore,y=Heterozygosity))+
labs(title="Heterozygosity vs Contamination Score per Sample", x="Contamination Score", y="Heterozygosity")+
theme_bw()+theme(plot.title=element_text(hjust=0.5),plot.subtitle=element_text(hjust=0.5))
singleSNP_summary<-summarizeGTscore(singleSNP_alleleReads, singleSNP_locusTable, polyGenResults_singleSNP)
head(singleSNP_summary)
#write results
write.table(singleSNP_summary,"singleSNP_summary.txt",quote=FALSE,sep="\t",row.names=FALSE)
ggplot()+geom_histogram(data=singleSNP_summary,aes(x=GenotypeRate),binwidth=0.03)+xlim(-0.01,1.01)+
labs(title="Locus Genotype Rate", x="Genotype Rate", y="Count")+
theme_bw()+theme(plot.title=element_text(hjust=0.5),plot.subtitle=element_text(hjust=0.5))
ggplot()+geom_histogram(data=singleSNP_summary,aes(x=AvgReadDepth),binwidth=20)+
labs(title="Average Read Depth per SNP", x="Average Read Depth", y="Count")+
theme_bw()+theme(plot.title=element_text(hjust=0.5),plot.subtitle=element_text(hjust=0.5))
ggplot()+geom_point(data=singleSNP_summary,aes(x=AvgReadDepth,y=GenotypeRate))+ylim(0,1)+
labs(title="Genotype Rate vs Average Depth per SNP", x="Average Depth", y="Genotype Rate")+
theme_bw()+theme(plot.title=element_text(hjust=0.5),plot.subtitle=element_text(hjust=0.5))
ggplot()+geom_histogram(data=singleSNP_summary,aes(x=minAF))+
labs(title="Minor Allele Frequency Single SNP", x="Minor Allele Frequency", y="Count")+
theme_bw()+theme(plot.title=element_text(hjust=0.5),plot.subtitle=element_text(hjust=0.5))
ggplot()+geom_histogram(data=singleSNP_summary,aes(x=majAF))+
labs(title="Major Allele Frequency Single SNP", x="Major Allele Frequency", y="Count")+
theme_bw()+theme(plot.title=element_text(hjust=0.5),plot.subtitle=element_text(hjust=0.5))
#convert missing genotypes "0" to NA
polyGenResults_singleSNP_NA<-polyGenResults_singleSNP
polyGenResults_singleSNP_NA[polyGenResults_singleSNP_NA=="0"]<-NA
#compare all samples, for each comparison get proportion of loci that have genotypes
#in both samples (proportionCommon) and proportion of shared loci that have identical
#genotypes (proportionMatch).
#Samples with a high proportionCommon and high proportionMatch are likely duplicates
polyGenResults_dupTest<-IDduplicateSamples(polyGenResults_singleSNP_NA)
write.table(polyGenResults_dupTest,"polyGenResults_dupTest.txt",quote=FALSE,sep="\t",row.names=FALSE)
polyGenResults_dupTest<-read.delim("polyGenResults_dupTest.txt",stringsAsFactors=FALSE)
head(polyGenResults_dupTest)
#potential duplicates are proportionMatch>0.8 and proportionCommon>0.75
#feel free to adjust these thresholds as needed
matchThresh=0.8
commonThresh=0.75
#plot results
ggplot()+geom_point(data=polyGenResults_dupTest,aes(x=proportionCommon,y=proportionMatch))+
geom_segment(aes(x=commonThresh,xend=1,y=matchThresh,yend=matchThresh),lty="dashed")+
geom_segment(aes(x=commonThresh,xend=commonThresh,y=matchThresh,yend=1),lty="dashed")
#filter to potentially duplicated samples using thresholds above
polyGenResults_dupTest %>% filter(proportionMatch>=matchThresh,proportionCommon>=commonThresh)
#plot heterozygosity vs genotype rate per sample
#samples with unusually high heterozygosity relative to others are candidates for contamination
#the sample above the dashed line in this example is likely contaminated
ggplot()+geom_point(data=GTscore_individualSummary,aes(x=GenotypeRate,y=Heterozygosity))+
labs(title="Heterozygosity vs Genotype Rate per Sample", x="Genotype Rate", y="Heterozygosity")+
theme_bw()+theme(plot.title=element_text(hjust=0.5),plot.subtitle=element_text(hjust=0.5))+
geom_hline(yintercept=0.30, lty="dashed")
#identify likely contaminated sample
contaminatedSample<-GTscore_individualSummary %>% filter(Heterozygosity>0.30) %>% pull(Sample)
contaminatedSample
#plot histogram of contamination score
ggplot()+geom_histogram(data=GTscore_individualSummary,aes(x=conScore),binwidth=0.02)+geom_vline(xintercept=0.3,lty="dashed")
#identify likely contaminated samples
contaminatedSamples2<-GTscore_individualSummary %>% filter(conScore>=0.3) %>% pull(Sample)
contaminatedSamples2
#Scatter Plots can show evidence of contamination or elevated ploidy
plotGenotypes_sample(singleSNP_locusTable, singleSNP_alleleReads, polyGenResults_singleSNP, type='scatter', savePlot="Y", saveDir="scatterPlots_sample")
#look at plots for samples, particularly for putatively contaminated samples identified by high heterozygosity
poorQualitySNPs<-singleSNP_summary %>% filter(GenotypeRate<0.5) %>% mutate(Locus_ID=as.character(Locus_ID)) %>% pull(Locus_ID)
poorQualitySNPs
plotGenotypes(singleSNP_locusTable, singleSNP_alleleReads, polyGenResults_singleSNP, type='scatter', savePlot="Y", saveDir="scatterPlots_loci")
#loci with high contamination scores should have scatterplots examined to ensure genotypes look accurate
singleSNP_summary %>% ggplot(data=.) + geom_histogram(aes(x=conScore),binwidth=0.01)+geom_vline(xintercept=0.3)
singleSNP_summary %>% ggplot(data=.) + geom_point(aes(x=conScore,y=minAF))
singleSNP_summary %>% filter(conScore>0.3)
write.table(polyGenResults_singleSNP,"polyGenResults_singleSNP.txt",quote=FALSE,sep="\t")
#example with no filtering
exportGenepop(polyGenResults_singleSNP,singleSNP_locusTable,filename="polyGenResults_singleSNP_genepop.txt")
#example with poor quality loci and contaminated sample removed
exportGenepop(polyGenResults_singleSNP,singleSNP_locusTable,
locusBlacklist=poorQualitySNPs,sampleBlacklist=contaminatedSample,
filename="polyGenResults_singleSNP_genepop_filtered.txt")
sampleMetaData<-data.frame(sample_type="mixture",repunit=NA,collection="SSCK17P2",indiv=colnames(polyGenResults_singleSNP))
head(sampleMetaData)
exportRubias(polyGenResults_singleSNP,singleSNP_locusTable,sampleMetaData,filename="polyGenResults_singleSNP_rubias.txt")
exportRubias(polyGenResults_singleSNP,singleSNP_locusTable,sampleMetaData,
locusBlacklist=poorQualitySNPs,sampleBlacklist=contaminatedSample,
filename="polyGenResults_singleSNP_rubias_filtered.txt")
singleSNP_alleleReads_corrected<-correctReads(singleSNP_locusTable,singleSNP_alleleReads)
knitr::opts_chunk$set(echo = TRUE,fig.path = "tools/")
library(here)
source("GTscore.r")
#load GTscore
source("GTscore.R")
#load locus table and allele reads file
singleSNP_locusTable<-read.delim("LocusTable_singleSNPs.txt",header=TRUE,stringsAsFactors=FALSE)
singleSNP_alleleReads<-read.delim("AlleleReads_singleSNPs.txt",header=TRUE,row.names=1,stringsAsFactors=FALSE)
head(singleSNP_locusTable)
singleSNP_alleleReads[1:5,1:5]
singleSNP_sampleSummary<-summarizeSamples(polyGenResults_singleSNP)
#generate singleSNP genotypes using the polyGen algorithm
polyGenResults_singleSNP<-polyGen(singleSNP_locusTable,singleSNP_alleleReads)
polyGenResults_singleSNP[1:5,1:5]
singleSNP_sampleSummary<-summarizeSamples(polyGenResults_singleSNP)
singleSNP_sampleSummary<-summarizeSamples(polyGenResults_singleSNP,singleSNP_alleleReads)
head(singleSNP_sampleSummary)
knitr::opts_chunk$set(echo = TRUE,fig.path = "tools/")
library(here)
library(here)
system2("perl",
args="AmpliconReadCounter.pl -p primerProbeFile.txt --files sampleFiles.txt")
#load GTscore
source("GTscore.R")
#load locus table and allele reads file
singleSNP_locusTable<-read.delim("LocusTable_singleSNPs.txt",header=TRUE,stringsAsFactors=FALSE)
singleSNP_alleleReads<-read.delim("AlleleReads_singleSNPs.txt",header=TRUE,row.names=1,stringsAsFactors=FALSE)
head(singleSNP_locusTable)
singleSNP_alleleReads[1:5,1:5]
singleSNP_alleleReads_adjusted<-correctReads(singleSNP_locusTable,singleSNP_alleleReads)
system2("perl",
args="AmpliconReadCounter.pl -p primerProbeFile.txt --files sampleFiles.txt")
system2("perl",
args="AmpliconReadCounter.pl -p primerProbeFile.txt --files sampleFiles.txt --inDir samples")
#load GTscore
source("GTscore.R")
#load locus table and allele reads file
singleSNP_locusTable<-read.delim("LocusTable_singleSNPs.txt",header=TRUE,stringsAsFactors=FALSE)
singleSNP_alleleReads<-read.delim("AlleleReads_singleSNPs.txt",header=TRUE,row.names=1,stringsAsFactors=FALSE)
head(singleSNP_locusTable)
singleSNP_alleleReads[1:5,1:5]
singleSNP_alleleReads_adjusted<-correctReads(singleSNP_locusTable,singleSNP_alleleReads)
#write to file
write.table(singleSNP_alleleReads_adjusted,"singleSNP_alleleReads_adjusted.txt",quote=FALSE,sep="\t")
#generate singleSNP genotypes using the polyGen algorithm
polyGenResults_singleSNP<-polyGen(singleSNP_locusTable,singleSNP_alleleReads)
polyGenResults_singleSNP[1:5,1:5]
GTscore_individualSummary<-read.delim("GTscore_individualSummary.txt",header=TRUE,stringsAsFactors=FALSE)
head(GTscore_individualSummary)
singleSNP_sampleSummary<-summarizeSamples(polyGenResults_singleSNP,singleSNP_alleleReads)
head(singleSNP_sampleSummary)
GTscore_individualSummary<-merge(GTscore_individualSummary,singleSNP_sampleSummary,by.x="Sample",by.y="sample")
ggplot()+geom_histogram(data=GTscore_individualSummary,aes(x=GenotypeRate),binwidth=0.03)+xlim(-0.01,1.01)+
labs(title="Sample Genotype Rate", x="Genotype Rate", y="Count")+
theme_bw()+theme(plot.title=element_text(hjust=0.5),plot.subtitle=element_text(hjust=0.5))
ggplot()+geom_histogram(data=GTscore_individualSummary,aes(x=Heterozygosity),binwidth=0.03)+xlim(-0.01,1.01)+
labs(title="Sample Heterozygosity", x="Heterozygosity", y="Count")+
theme_bw()+theme(plot.title=element_text(hjust=0.5),plot.subtitle=element_text(hjust=0.5))
#dashed line added at 90% genotype rate, this is not a strict threshold, just a goal to aim for
ggplot()+geom_point(data=GTscore_individualSummary,aes(x=Primer.Probe.Reads,y=GenotypeRate))+
labs(title="Genotype Rate vs Total Reads per Sample", x="Primer Probe Reads", y="Genotype Rate")+
theme_bw()+theme(plot.title=element_text(hjust=0.5),plot.subtitle=element_text(hjust=0.5))+
geom_hline(yintercept=0.9,lty="dashed")
ggplot()+geom_point(data=GTscore_individualSummary,aes(x=Primer.Probe.Reads,y=Heterozygosity))+
labs(title="Heterozygosity vs Total Reads per Sample", x="Primer Probe Reads", y="Heterozygosity")+
theme_bw()+theme(plot.title=element_text(hjust=0.5),plot.subtitle=element_text(hjust=0.5))+
geom_hline(yintercept=0.3, lty="dashed")
ggplot()+geom_point(data=GTscore_individualSummary,aes(x=GenotypeRate,y=Heterozygosity))+
labs(title="Heterozygosity vs Genotype Rate per Sample", x="Genotype Rate", y="Heterozygosity")+
theme_bw()+theme(plot.title=element_text(hjust=0.5),plot.subtitle=element_text(hjust=0.5))
ggplot()+geom_point(data=GTscore_individualSummary,aes(x=conScore,y=Heterozygosity))+
labs(title="Heterozygosity vs Contamination Score per Sample", x="Contamination Score", y="Heterozygosity")+
theme_bw()+theme(plot.title=element_text(hjust=0.5),plot.subtitle=element_text(hjust=0.5))
singleSNP_summary<-summarizeGTscore(singleSNP_alleleReads, singleSNP_locusTable, polyGenResults_singleSNP)
head(singleSNP_summary)
#write results
write.table(singleSNP_summary,"singleSNP_summary.txt",quote=FALSE,sep="\t",row.names=FALSE)
ggplot()+geom_histogram(data=singleSNP_summary,aes(x=GenotypeRate),binwidth=0.03)+xlim(-0.01,1.01)+
labs(title="Locus Genotype Rate", x="Genotype Rate", y="Count")+
theme_bw()+theme(plot.title=element_text(hjust=0.5),plot.subtitle=element_text(hjust=0.5))
ggplot()+geom_histogram(data=singleSNP_summary,aes(x=GenotypeRate),binwidth=0.03)+xlim(-0.01,1.01)+
labs(title="Locus Genotype Rate", x="Genotype Rate", y="Count")+
theme_bw()+theme(plot.title=element_text(hjust=0.5),plot.subtitle=element_text(hjust=0.5))
ggplot()+geom_histogram(data=singleSNP_summary,aes(x=AvgReadDepth),binwidth=20)+
labs(title="Average Read Depth per SNP", x="Average Read Depth", y="Count")+
theme_bw()+theme(plot.title=element_text(hjust=0.5),plot.subtitle=element_text(hjust=0.5))
ggplot()+geom_point(data=singleSNP_summary,aes(x=AvgReadDepth,y=GenotypeRate))+ylim(0,1)+
labs(title="Genotype Rate vs Average Depth per SNP", x="Average Depth", y="Genotype Rate")+
theme_bw()+theme(plot.title=element_text(hjust=0.5),plot.subtitle=element_text(hjust=0.5))
ggplot()+geom_histogram(data=singleSNP_summary,aes(x=minAF),binwidth=0.01)+
labs(title="Minor Allele Frequency Single SNP", x="Minor Allele Frequency", y="Count")+
theme_bw()+theme(plot.title=element_text(hjust=0.5),plot.subtitle=element_text(hjust=0.5))
ggplot()+geom_histogram(data=singleSNP_summary,aes(x=majAF),binwidth=0.01)+
labs(title="Major Allele Frequency Single SNP", x="Major Allele Frequency", y="Count")+
theme_bw()+theme(plot.title=element_text(hjust=0.5),plot.subtitle=element_text(hjust=0.5))
#convert missing genotypes "0" to NA
polyGenResults_singleSNP_NA<-polyGenResults_singleSNP
polyGenResults_singleSNP_NA[polyGenResults_singleSNP_NA=="0"]<-NA
#compare all samples, for each comparison get proportion of loci that have genotypes
#in both samples (proportionCommon) and proportion of shared loci that have identical
#genotypes (proportionMatch).
#Samples with a high proportionCommon and high proportionMatch are likely duplicates
polyGenResults_dupTest<-IDduplicateSamples(polyGenResults_singleSNP_NA)
write.table(polyGenResults_dupTest,"polyGenResults_dupTest.txt",quote=FALSE,sep="\t",row.names=FALSE)
polyGenResults_dupTest<-read.delim("polyGenResults_dupTest.txt",stringsAsFactors=FALSE)
head(polyGenResults_dupTest)
#potential duplicates are proportionMatch>0.8 and proportionCommon>0.75
#feel free to adjust these thresholds as needed
matchThresh=0.8
commonThresh=0.75
#plot results
ggplot()+geom_point(data=polyGenResults_dupTest,aes(x=proportionCommon,y=proportionMatch))+
geom_segment(aes(x=commonThresh,xend=1,y=matchThresh,yend=matchThresh),lty="dashed")+
geom_segment(aes(x=commonThresh,xend=commonThresh,y=matchThresh,yend=1),lty="dashed")
#filter to potentially duplicated samples using thresholds above
polyGenResults_dupTest %>% filter(proportionMatch>=matchThresh,proportionCommon>=commonThresh)
knitr::opts_chunk$set(echo = TRUE,fig.path = "tools/")
library(here)
#load GTscore
source("GTscore.R")
#load locus table and allele reads file
singleSNP_locusTable<-read.delim("LocusTable_singleSNPs.txt",header=TRUE,stringsAsFactors=FALSE)
singleSNP_alleleReads<-read.delim("AlleleReads_singleSNPs.txt",header=TRUE,row.names=1,stringsAsFactors=FALSE)
head(singleSNP_locusTable)
singleSNP_alleleReads[1:5,1:5]
singleSNP_alleleReads_adjusted<-correctReads(singleSNP_locusTable,singleSNP_alleleReads)
#write to file
write.table(singleSNP_alleleReads_adjusted,"singleSNP_alleleReads_adjusted.txt",quote=FALSE,sep="\t")
#generate singleSNP genotypes using the polyGen algorithm
polyGenResults_singleSNP<-polyGen(singleSNP_locusTable,singleSNP_alleleReads)
polyGenResults_singleSNP[1:5,1:5]
